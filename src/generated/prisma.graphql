# timestamp: Sat Apr 28 2018 15:15:57 GMT+0100 (BST)

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePayment {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
Raw JSON value
"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createOrder(data: OrderCreateInput!): Order!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createPayment(data: PaymentCreateInput!): Payment!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrderItem(
    data: OrderItemUpdateInput!
    where: OrderItemWhereUniqueInput!
  ): OrderItem
  updatePayment(
    data: PaymentUpdateInput!
    where: PaymentWhereUniqueInput!
  ): Payment
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  upsertOrder(
    where: OrderWhereUniqueInput!
    create: OrderCreateInput!
    update: OrderUpdateInput!
  ): Order!
  upsertOrderItem(
    where: OrderItemWhereUniqueInput!
    create: OrderItemCreateInput!
    update: OrderItemUpdateInput!
  ): OrderItem!
  upsertPayment(
    where: PaymentWhereUniqueInput!
    create: PaymentCreateInput!
    update: PaymentUpdateInput!
  ): Payment!
  updateManyOrders(
    data: OrderUpdateInput!
    where: OrderWhereInput
  ): BatchPayload!
  updateManyOrderItems(
    data: OrderItemUpdateInput!
    where: OrderItemWhereInput
  ): BatchPayload!
  updateManyPayments(
    data: PaymentUpdateInput!
    where: PaymentWhereInput
  ): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Order implements Node {
  id: ID!
  items(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [OrderItem!]
  email: String!
  total: Int!
  currency: String
  metadata: Json
  payments(
    where: PaymentWhereInput
    orderBy: PaymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Payment!]
  createdAt: DateTime!
}

"""
A connection to a list of items.
"""
type OrderConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  email: String!
  total: Int!
  currency: String
  metadata: Json
  items: OrderItemCreateManyWithoutOrderInput
  payments: PaymentCreateManyWithoutOrderInput
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutPaymentsInput {
  create: OrderCreateWithoutPaymentsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutItemsInput {
  email: String!
  total: Int!
  currency: String
  metadata: Json
  payments: PaymentCreateManyWithoutOrderInput
}

input OrderCreateWithoutPaymentsInput {
  email: String!
  total: Int!
  currency: String
  metadata: Json
  items: OrderItemCreateManyWithoutOrderInput
}

"""
An edge in a connection.
"""
type OrderEdge {
  """
  The item at the end of the edge.
  """
  node: Order!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  order(where: OrderWhereInput): Order!
  description: String!
  quantity: Int!
  amount: Int!
  metadata: Json
}

"""
A connection to a list of items.
"""
type OrderItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  description: String!
  quantity: Int
  amount: Int
  metadata: Json
  order: OrderCreateOneWithoutItemsInput!
}

input OrderItemCreateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateWithoutOrderInput {
  description: String!
  quantity: Int
  amount: Int
  metadata: Json
}

"""
An edge in a connection.
"""
type OrderItemEdge {
  """
  The item at the end of the edge.
  """
  node: OrderItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  quantity_ASC
  quantity_DESC
  amount_ASC
  amount_DESC
  metadata_ASC
  metadata_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderItemPreviousValues {
  id: ID!
  description: String!
  quantity: Int!
  amount: Int!
  metadata: Json
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
}

input OrderItemUpdateInput {
  description: String
  quantity: Int
  amount: Int
  metadata: Json
  order: OrderUpdateOneWithoutItemsInput
}

input OrderItemUpdateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  delete: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateWithoutOrderDataInput {
  description: String
  quantity: Int
  amount: Int
  metadata: Json
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutOrderDataInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  create: OrderItemCreateWithoutOrderInput!
}

input OrderItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  quantity: Int

  """
  All values that are not equal to given value.
  """
  quantity_not: Int

  """
  All values that are contained in given list.
  """
  quantity_in: [Int!]

  """
  All values that are not contained in given list.
  """
  quantity_not_in: [Int!]

  """
  All values less than the given value.
  """
  quantity_lt: Int

  """
  All values less than or equal the given value.
  """
  quantity_lte: Int

  """
  All values greater than the given value.
  """
  quantity_gt: Int

  """
  All values greater than or equal the given value.
  """
  quantity_gte: Int
  amount: Int

  """
  All values that are not equal to given value.
  """
  amount_not: Int

  """
  All values that are contained in given list.
  """
  amount_in: [Int!]

  """
  All values that are not contained in given list.
  """
  amount_not_in: [Int!]

  """
  All values less than the given value.
  """
  amount_lt: Int

  """
  All values less than or equal the given value.
  """
  amount_lte: Int

  """
  All values greater than the given value.
  """
  amount_gt: Int

  """
  All values greater than or equal the given value.
  """
  amount_gte: Int
  order: OrderWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  total_ASC
  total_DESC
  currency_ASC
  currency_DESC
  metadata_ASC
  metadata_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  email: String!
  total: Int!
  currency: String
  metadata: Json
  createdAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  email: String
  total: Int
  currency: String
  metadata: Json
  items: OrderItemUpdateManyWithoutOrderInput
  payments: PaymentUpdateManyWithoutOrderInput
}

input OrderUpdateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
  delete: Boolean
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
}

input OrderUpdateOneWithoutPaymentsInput {
  create: OrderCreateWithoutPaymentsInput
  connect: OrderWhereUniqueInput
  delete: Boolean
  update: OrderUpdateWithoutPaymentsDataInput
  upsert: OrderUpsertWithoutPaymentsInput
}

input OrderUpdateWithoutItemsDataInput {
  email: String
  total: Int
  currency: String
  metadata: Json
  payments: PaymentUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutPaymentsDataInput {
  email: String
  total: Int
  currency: String
  metadata: Json
  items: OrderItemUpdateManyWithoutOrderInput
}

input OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput!
  create: OrderCreateWithoutItemsInput!
}

input OrderUpsertWithoutPaymentsInput {
  update: OrderUpdateWithoutPaymentsDataInput!
  create: OrderCreateWithoutPaymentsInput!
}

input OrderWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  currency: String

  """
  All values that are not equal to given value.
  """
  currency_not: String

  """
  All values that are contained in given list.
  """
  currency_in: [String!]

  """
  All values that are not contained in given list.
  """
  currency_not_in: [String!]

  """
  All values less than the given value.
  """
  currency_lt: String

  """
  All values less than or equal the given value.
  """
  currency_lte: String

  """
  All values greater than the given value.
  """
  currency_gt: String

  """
  All values greater than or equal the given value.
  """
  currency_gte: String

  """
  All values containing the given string.
  """
  currency_contains: String

  """
  All values not containing the given string.
  """
  currency_not_contains: String

  """
  All values starting with the given string.
  """
  currency_starts_with: String

  """
  All values not starting with the given string.
  """
  currency_not_starts_with: String

  """
  All values ending with the given string.
  """
  currency_ends_with: String

  """
  All values not ending with the given string.
  """
  currency_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Payment implements Node {
  id: ID!
  order(where: OrderWhereInput): Order!
  status: String!
  reference: String!
  currency: String!
  createdAt: DateTime!
}

"""
A connection to a list of items.
"""
type PaymentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  status: String!
  reference: String!
  currency: String!
  order: OrderCreateOneWithoutPaymentsInput!
}

input PaymentCreateManyWithoutOrderInput {
  create: [PaymentCreateWithoutOrderInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutOrderInput {
  status: String!
  reference: String!
  currency: String!
}

"""
An edge in a connection.
"""
type PaymentEdge {
  """
  The item at the end of the edge.
  """
  node: Payment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  reference_ASC
  reference_DESC
  currency_ASC
  currency_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentPreviousValues {
  id: ID!
  status: String!
  reference: String!
  currency: String!
  createdAt: DateTime!
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
}

input PaymentUpdateInput {
  status: String
  reference: String
  currency: String
  order: OrderUpdateOneWithoutPaymentsInput
}

input PaymentUpdateManyWithoutOrderInput {
  create: [PaymentCreateWithoutOrderInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutOrderInput!]
}

input PaymentUpdateWithoutOrderDataInput {
  status: String
  reference: String
  currency: String
}

input PaymentUpdateWithWhereUniqueWithoutOrderInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutOrderDataInput!
}

input PaymentUpsertWithWhereUniqueWithoutOrderInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutOrderDataInput!
  create: PaymentCreateWithoutOrderInput!
}

input PaymentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PaymentWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PaymentWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PaymentWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  status: String

  """
  All values that are not equal to given value.
  """
  status_not: String

  """
  All values that are contained in given list.
  """
  status_in: [String!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [String!]

  """
  All values less than the given value.
  """
  status_lt: String

  """
  All values less than or equal the given value.
  """
  status_lte: String

  """
  All values greater than the given value.
  """
  status_gt: String

  """
  All values greater than or equal the given value.
  """
  status_gte: String

  """
  All values containing the given string.
  """
  status_contains: String

  """
  All values not containing the given string.
  """
  status_not_contains: String

  """
  All values starting with the given string.
  """
  status_starts_with: String

  """
  All values not starting with the given string.
  """
  status_not_starts_with: String

  """
  All values ending with the given string.
  """
  status_ends_with: String

  """
  All values not ending with the given string.
  """
  status_not_ends_with: String
  reference: String

  """
  All values that are not equal to given value.
  """
  reference_not: String

  """
  All values that are contained in given list.
  """
  reference_in: [String!]

  """
  All values that are not contained in given list.
  """
  reference_not_in: [String!]

  """
  All values less than the given value.
  """
  reference_lt: String

  """
  All values less than or equal the given value.
  """
  reference_lte: String

  """
  All values greater than the given value.
  """
  reference_gt: String

  """
  All values greater than or equal the given value.
  """
  reference_gte: String

  """
  All values containing the given string.
  """
  reference_contains: String

  """
  All values not containing the given string.
  """
  reference_not_contains: String

  """
  All values starting with the given string.
  """
  reference_starts_with: String

  """
  All values not starting with the given string.
  """
  reference_not_starts_with: String

  """
  All values ending with the given string.
  """
  reference_ends_with: String

  """
  All values not ending with the given string.
  """
  reference_not_ends_with: String
  currency: String

  """
  All values that are not equal to given value.
  """
  currency_not: String

  """
  All values that are contained in given list.
  """
  currency_in: [String!]

  """
  All values that are not contained in given list.
  """
  currency_not_in: [String!]

  """
  All values less than the given value.
  """
  currency_lt: String

  """
  All values less than or equal the given value.
  """
  currency_lte: String

  """
  All values greater than the given value.
  """
  currency_gt: String

  """
  All values greater than or equal the given value.
  """
  currency_gte: String

  """
  All values containing the given string.
  """
  currency_contains: String

  """
  All values not containing the given string.
  """
  currency_not_contains: String

  """
  All values starting with the given string.
  """
  currency_starts_with: String

  """
  All values not starting with the given string.
  """
  currency_not_starts_with: String

  """
  All values ending with the given string.
  """
  currency_ends_with: String

  """
  All values not ending with the given string.
  """
  currency_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  order: OrderWhereInput
}

input PaymentWhereUniqueInput {
  id: ID
}

type Query {
  orders(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Order]!
  orderItems(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [OrderItem]!
  payments(
    where: PaymentWhereInput
    orderBy: PaymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Payment]!
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  payment(where: PaymentWhereUniqueInput!): Payment
  ordersConnection(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrderConnection!
  orderItemsConnection(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrderItemConnection!
  paymentsConnection(
    where: PaymentWhereInput
    orderBy: PaymentOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PaymentConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderItem(
    where: OrderItemSubscriptionWhereInput
  ): OrderItemSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
}
